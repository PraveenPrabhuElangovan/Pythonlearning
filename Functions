#Module 2:
import random
import string
from collections import defaultdict

# Step 1: Generate a random key
def generate_random_key():
    """Generate a random lowercase letter as a key."""
    return random.choice(string.ascii_lowercase)

# Step 2: Generate a random value (between 0 and 100)
def generate_random_value():
    """Generate a random integer between 0 and 100."""
    return random.randint(0, 100)

# Step 3: Create a random dictionary with 1 to 5 keys
def gen_random_dict():
    """Generate a random dictionary with a random number of keys."""
    num_keys = random.randint(1, 5)  # Random number of keys per dictionary
    return {generate_random_key(): generate_random_value() for _ in range(num_keys)}

# Step 4: Generate a list of random dictionaries
def generate_random_list_of_dicts():
    """Generate a list with a random number of dictionaries (between 2 and 10)."""
    num_dicts = random.randint(2, 10)
    return [gen_random_dict() for _ in range(num_dicts)]

# Step 5: Update the common dictionary with a key-value pair
def update_common_dict(generate_random_list_of_dicts, key, value, dict_num):
    """Helper function to update the common dictionary with a key-value pair."""
    if key in generate_random_list_of_dicts:
        # If key exists, store the max value and the dictionary number
        if value > generate_random_list_of_dicts[key][0]:
            generate_random_list_of_dicts[key] = (value, dict_num)
    else:
        # Add new key-value pair if the key doesn't exist
        generate_random_list_of_dicts[key] = (value, dict_num)

# Step 6: Merge multiple dictionaries into one common dictionary
def merge_dicts(dicts):
    """Merge a list of dictionaries into a common dictionary."""
    common_dict = {}
    for idx, current_dict in enumerate(dicts):
        for key, value in current_dict.items():
            update_common_dict(common_dict, key, value, idx + 1)
    return common_dict

# Step 7: Rename keys in the common dictionary if they appear in multiple dictionaries
def rename_keys_for_common_entries(common_dict, dicts):
    """Rename the keys if they appeared in more than one dictionary."""
    final_dict = {}
    for key, (value, dict_num) in sorted(common_dict.items()):
        if sum(1 for d in dicts if key in d) > 1:
            # If key appeared in multiple dictionaries, rename it
            final_dict[f"{key}_{dict_num}"] = value
        else:
            final_dict[key] = value
    return final_dict

# Step 8: Combine all steps into one function
def generate_combined_dict():
    """Generate and return the combined dictionary."""
    random_list = generate_random_list_of_dicts()  # Generate the list of random dictionaries
    print(f"random list of dict: {random_list}")
    common_dict = merge_dicts(random_list)  # Merge them into one common dictionary
    return rename_keys_for_common_entries(common_dict, random_list)  # Rename keys if necessary

# Generate and print the final combined dictionary
final_combined_dict = generate_combined_dict()

print(f"Final combined dict: {final_combined_dict}")

#Module 3:
import re


# Step 1: Normalize text from letter cases (convert everything to lowercase)
def normalize_text(text):
    """Normalize the entire text by converting it to lowercase."""
    return text.lower()


# Step 2: Split the text into parts inside and outside quotes
def split_text_by_quotes(text):
    """Split text into parts that are inside and outside quotes."""
    return re.split(r'(["“”][^“”]*["”])', text)


# Step 3: Correct "iz" to "is" outside quotes
def correct_iz_outside_quotes(parts):
    """Correct instances of 'iz' to 'is' only outside quotes."""
    for i, part in enumerate(parts):
        if not (part.startswith('"') or part.startswith('“')):  # Not inside quotes
            parts[i] = re.sub(r'\biz\b', 'is', part)
    return ''.join(parts)


# Step 4: Extract last words from each sentence
def extract_last_words_from_sentences(text):
    """Extract the last word from each sentence."""
    sentences = text.split('.')
    return [sentence.strip().split()[-1] for sentence in sentences if sentence.strip()]


# Step 5: Count whitespace characters (spaces, tabs, newlines)
def count_whitespace(text):
    """Count all whitespace characters in the text."""
    return sum(1 for char in text if char.isspace())


# Step 6: Capitalize each sentence in the text
def capitalize_sentences(text):
    """Capitalize the first letter of each sentence in the text."""
    sentences = text.split('.')
    capitalized_sentences = [sentence.strip().capitalize() for sentence in sentences if sentence.strip()]
    return '. '.join(capitalized_sentences) + '.'  # Add a period at the end


# Step 7: Combine the corrected text with the new sentence
def append_new_sentence(corrected_text, new_sentence):
    """Append a new sentence formed by the last words of each sentence, capitalizing it."""
    # Capitalize the first letter of the new sentence
    new_sentence = new_sentence.capitalize()
    return f"{corrected_text}\n\n{new_sentence}."


# Main function to process the text
def process_text(text):
    """Process the text: normalize, correct, extract last words, count whitespace, capitalize sentences, and append new sentence."""
    # Step 1: Normalize the text
    normalized_text = normalize_text(text)

    # Step 2: Correct "iz" outside quotes
    split_parts = split_text_by_quotes(normalized_text)
    corrected_text = correct_iz_outside_quotes(split_parts)

    # Step 3: Extract last words and create a new sentence
    last_words = extract_last_words_from_sentences(corrected_text)
    new_sentence = ' '.join(last_words)

    # Step 4: Capitalize all sentences
    corrected_text = capitalize_sentences(corrected_text)

    # Step 5: Append the new sentence to the corrected text
    final_text = append_new_sentence(corrected_text, new_sentence)

    # Step 6: Count whitespace characters
    whitespace_count = count_whitespace(final_text)

    return final_text, whitespace_count


# Original text
text = """
tHis iz your homeWork, copy these Text to variable.
You NEED TO normalize it fROM letter CASEs point oF View. also, create one MORE senTENCE witH LAST WoRDS of each existING SENtence and add it to the END OF this Paragraph.
it iZ misspeLLing here. fix“iZ” with correct “is”, but ONLY when it Iz a mistAKE.
last iz TO calculate nuMber OF Whitespace characteRS in this Tex. caREFULL, not only Spaces, but ALL whitespaces. I got 87.
"""

# Process the text
final_text, whitespace_count = process_text(text)

# Output the result
print("Normalized and Corrected Text:\n")
print(final_text)
print("\nWhitespace character count:", whitespace_count)

